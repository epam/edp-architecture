
@startuml

package edp.epam.com {

  domain -r-> vcs: create repositories and bracnhes
  domain -r-> jenkins: create JenkinsFolder and JenkinsJob

  package domain {


    class Codebase {
      -- metadata --
      -- spec --
      String name
      CodebaseType type
      VCS
      techFramework
      -- status --
      -- reconcile --
      +JenkinsFolderCr
      +GitRepositoryCr
    }

    enum CodebaseType {
      APPLICATION
      AUTOTESTS
      LIBRARY
    }
    Codebase -left-> CodebaseType
    Codebase -right[hidden]-> CdPipeline

    class TechologyFramework {
      -- metadata --
      -- spec --
        String language
        String jenkinsSlaveAlias
        String jenkinsSlaveVersion
      -- status --
    }
    TechologyFramework -up[hidden]-> CodebaseType
    Codebase --> TechologyFramework :create

    class CodebaseBranch {
      -- metadata --
      -- spec --
        + String name
      -- status --
      -- reconcile --
      +JenkinsJobCrs
      +GitBranchCr
    }
    CodebaseBranch .u.>  Codebase : "owner ref"
    CodebaseBranch -r-> CodebaseArtifactStream : create

    class CodebaseArtifact {
      -- metadata --
      -- spec --
        + String commit
        + ArtifactType type
      -- status --
        String version
        String url
    }
    CodebaseArtifact .u.> CodebaseBranch: "owner ref"

    enum ArtifactType {
      ZIP
      JAR
      DOCKER
    }
    CodebaseArtifact -left-> ArtifactType

    class CdPipeline {
      -- metadata --
      -- spec --
        CodebaseArtifactStream[] applications
        ThirdPartyService[] services
      -- status --
      -- reconcile --
      +JenkinsFolderCr
    }
    CdPipeline -d-> ThirdPartyService: create
    CdPipeline -d-> CdPipelineStage: create

    class CodebaseArtifactStream {
      -- metadata --
      -- spec --
        + String name
        + CodbaseArtifact[] availableArtifacts
      -- status --
        String version
        String url
    }
    CodebaseArtifact .u.> CodebaseArtifactStream : "owner ref"
    CodebaseArtifactStream .u.> CdPipeline : "owner ref"
    CodebaseArtifactStream *-r[hidden]- ThirdPartyService


    class ThirdPartyService {
      -- metadata --
      -- spec --
      -- status --
    }

    class CdPipelineStage {
      -- metadata --
      -- spec --
        CdQualityGate[] qualityGates
        TriggerType triggerType
      -- status --
      -- reconcile --
      +JenkinsJobCr
    }
    CdPipelineStage -d-> CdQualityGate: create
    CdPipelineStage -u-> CodebaseArtifactStream : create input stream
    CdPipelineStage -u-> CodebaseArtifactStream : create output stream
    CdPipelineStage ..> CdPipelineStage : owner ref next stage

    enum TriggerType {
      MANUAL
      NEW_ARTIFACT
    }
    CdPipelineStage --> TriggerType

    class CdQualityGate {
      -- metadata --
      -- spec --
        CdQualityGateType type
        CodebaseBranch autotest
        String command2Run
        String command2CheckQualityGate
      -- status --

    }
    CdQualityGate .up.> CodebaseBranch: owner ref

    class CdStageDeploy {
      -- metadata --
      -- spec --
        CdPipelineStage stage
        CodebaseArtifact: artifacts
      -- status --
    }
    CdStageDeploy .u.> CdPipelineStage :owner ref


  }

  package api {
    class DeliverySpace {
      -- metadata --
      -- spec --
      EDPComponent[] components
      -- status --
    }



    enum EdpLocationType {
      EXTERNAL
      INTERNAL
    }
    EdpComponent -r-> EdpLocationType

    abstract class EdpComponent {
      -- metadata --
      EdpComponentType[] componentTypes
      String edpTenant
      -- spec --
      EdpLocationType location
      String version
      String extrenalUrl
      Credentials credentials
      -- status --
      boolean clientActive
      externalUrl
    }
    EdpComponent .u.> DeliverySpace : owner ref

    vcs -r[hidden]-> keycloak
    package vcs {
      class GitServer {
      -- metadata --
      -- spec --
        String gitHost
        String httpsPort
        String sshPort
        Secret gerritSshKey
        boolean createCodeReviewPipeline
      -- status --
      }
      class GitRepository {
      -- metadata --
      -- spec --
        String repositoryName
      -- status --
      }
      GitRepository .u.> GitServer : "owner reference"

      class GitBranch {
      -- metadata --
      -- spec --
        String name
      -- status --
      }
      GitBranch .u.> GitRepository : "owner reference"
    }

    package keycloak {
      class Keycloak {
      -- metadata --
      -- spec --
      -- status --
      }
      EdpComponent<|--Keycloak

      class KeycloakInstaller<<tbd>> {
      -- metadata --
      -- spec --
        String version
      -- status --
      }
      KeycloakInstaller <-r- Keycloak : create if type of \n component is internal

      class KeycloakRealm {
      -- metadata --
      -- spec --
        String name
      -- status --
      }
      KeycloakRealm <-d- Keycloak : create

      class KeycloakClient {
      -- metadata --
      -- spec --
        String realmname
        String name
      -- status --
      }
      KeycloakClient .u.> KeycloakRealm : "owner reference"

      class KeycloakUser {
      -- metadata --
      -- spec --
        String username
        String[] roles
      -- status --
      }
      KeycloakUser .u.> KeycloakRealm : "owner reference \n created from KeyCloak "

    }

    package jenkins {
      class Jenkins {
      -- metadata --
      -- spec --
      -- status --
      }
      EdpComponent<|--Jenkins

      class JenkinsInstaller {
      -- metadata --
      -- spec --
        String version
      -- status --
      }
      JenkinsInstaller <-r- Jenkins : created if type of component is internal

      class JenkinsPlugin {
      -- metadata --
      -- spec --
        String pluginInstruction
      -- status --
      }
      JenkinsPlugin .u.> Jenkins : "owner reference"

      class JenkinsServiceAccount {
      -- metadata --
      -- spec --
        Credentials credentials
      -- status --
      }
      JenkinsServiceAccount .u.> Jenkins : "owner reference"

      class JenkinsFolder {
      -- metadata --
      creates folder with \n create release pipeline
      -- spec --
        String name
      -- status --
      }
      JenkinsFolder .u.> Jenkins : "owner reference"

      class JenkinsJob {
      -- metadata --
      -- spec --
        String name
        Trigger trigger
        Map[] parameters
        JobSource jobSource
      -- status --
      }
      JenkinsJob .u.> JenkinsFolder : "owner reference"

      class JenkinsJobBuild {
      -- metadata --
      -- spec --
      -- status --
      }
      JenkinsJobBuild .u.> JenkinsJob : "owner ref"

  }

  EdpComponent<|--components: all components inherit EDPComponent

  components -u-> JenkinsServiceAccount :create
  components -u-> JenkinsPlugin :create
  components -u-> KeycloakClient :create

  package components {
    package nexus {
      class Nexus {
        -- metadata --
        - String is-credentials
        - String ci-credentials
        -- spec --
        + String version
        + Struct volumes
        + Struct users
        -- status --
        - Bool Available
        - Time LastTimeUpdated
        - String Status
      }

      class NexusUser {
        -- metadata --
        -- spec --
        + String nexusName (optional)
        + String name
        + Struct role
        -- status --
        -- reconcile --
        +UserInNexus
      }
      NexusUser .u.> Nexus : owner ref

      class NexusRepository {
        -- metadata --
        -- spec --
        + String nexusName (optional)
        + String name
        -- status --
      }
      NexusRepository .u.> Nexus : owner ref
    }

    package sonar {
      class Sonar {
        -- metadata --
        -- spec --
        + String version
        -- status --
      }


      class SonarQualityProfile {
        -- metadata --
        -- spec --
        + String sonarName (optional)
        + String profileName
        + File rules
        -- status --
      }
      SonarQualityProfile .u.> Sonar : owner ref

      class SonarQualityGate {
        -- metadata --
        -- spec --
        + String sonarName (optional)
        + String gateName
        + File gates
        -- status --
      }
      SonarQualityGate .u.> Sonar : owner ref
    }

    git -u-> GitServer :create
    package git {
      package gerrit {
        class Gerrit {
          -- metadata --
          -- spec --
          -- status --
        }

        class GerritRepository {
          -- metadata --
          -- spec --
          + String gerritName (optional)
          + String repositoryName
          + GitDetails source
          -- status --
        }
        GerritRepository .u.> Gerrit : owner ref

      }


      package bitbucket {
        class BitBucket {
          -- metadata --
          -- spec --
          -- status --
        }
      }

      package gitlab {
        class Gitllab {
          -- metadata --
          -- spec --
          -- status --
        }
      }
     }
  }
}

legend
|= arrow   |= meaning|
|  ..>     |   owner references  |
|  -->     |   creates     |
|<back:LightGoldenRodYellow>    </back>| Work In Progress |
|<back:LightGreen>    </back>| Implemented |
|<back:Khaki>    </back>| TBD |
endlegend

skinparam class {
	backgroundColor<<wip>> LightGoldenRodYellow
	backgroundColor<<impl>> LightGreen
	backgroundColor<<tbd>> Khaki
}
@enduml