
@startuml

package edp.epam.com {


  package domain {


    class Codebase {
      -- metadata --
      -- spec --
      String name
      CodebaseType type
      VCS
      techFramework
      -- status --
      -- reconcile --
      +JenkinsFolderCr
      +GitRepositoryCr
    }

    enum CodebaseType {
      APPLICATION
      AUTOTESTS
      LIBRARY
    }
    Codebase -left-> CodebaseType
    Codebase -right[hidden]-> CdPipeline

    class TechologyFramework {
      -- metadata --
      -- spec --
        String language
        String jenkinsSlaveAlias
        String jenkinsSlaveVersion
      -- status --
    }
    TechologyFramework -up[hidden]-> CodebaseType
    Codebase --> TechologyFramework :create

    class CodebaseBranch {
      -- metadata --
      -- spec --
        + String name
      -- status --
      -- reconcile --
      +JenkinsJobCrs
      +GitBranchCr
    }
    CodebaseBranch .u.>  Codebase : "owner ref"
    CodebaseBranch -r-> CodebaseArtifactStream : create

    class CodebaseArtifact {
      -- metadata --
      -- spec --
        + String commit
        + ArtifactType type
      -- status --
        String version
        String url
    }
    CodebaseArtifact .u.> CodebaseBranch: "owner ref"

    enum ArtifactType {
      ZIP
      JAR
      DOCKER
    }
    CodebaseArtifact -left-> ArtifactType

    class CdPipeline {
      -- metadata --
      -- spec --
        CodebaseArtifactStream[] applications
        ThirdPartyService[] services
      -- status --
      -- reconcile --
      +JenkinsFolderCr
    }
    CdPipeline -d-> ThirdPartyService: create
    CdPipeline -d-> CdPipelineStage: create

    class CodebaseArtifactStream {
      -- metadata --
      -- spec --
        + String name
        + CodbaseArtifact[] availableArtifacts
      -- status --
        String version
        String url
    }
    CodebaseArtifact .u.> CodebaseArtifactStream : "owner ref"
    CodebaseArtifactStream .u.> CdPipeline : "owner ref"
    CodebaseArtifactStream *-r[hidden]- ThirdPartyService


    class ThirdPartyService {
      -- metadata --
      -- spec --
      -- status --
    }

    class CdPipelineStage {
      -- metadata --
      -- spec --
        CdQualityGate[] qualityGates
        TriggerType triggerType
      -- status --
      -- reconcile --
      +JenkinsJobCr
    }
    CdPipelineStage -d-> CdQualityGate: create
    CdPipelineStage -u-> CodebaseArtifactStream : create input stream
    CdPipelineStage -u-> CodebaseArtifactStream : create output stream
    CdPipelineStage ..> CdPipelineStage : owner ref next stage

    enum TriggerType {
      MANUAL
      NEW_ARTIFACT
    }
    CdPipelineStage --> TriggerType

    class CdQualityGate {
      -- metadata --
      -- spec --
        CdQualityGateType type
        CodebaseBranch autotest
        String command2Run
        String command2CheckQualityGate
      -- status --

    }
    CdQualityGate .up.> CodebaseBranch: owner ref

    class CdStageDeploy {
      -- metadata --
      -- spec --
        CdPipelineStage stage
        CodebaseArtifact: artifacts
      -- status --
    }
    CdStageDeploy .u.> CdPipelineStage :owner ref


  }

  package api {

    class EdpComponent {
      -- metadata --
      String name
      -- spec --
      String componentType
      String url
      String icon
      -- status --
    }

    vcs -r[hidden]-> keycloak
    package vcs {
      class GitServer {
      -- metadata --
        String name
      -- spec --
        String gitHost
        String gitUser
        String httpsPort
        String sshPort
        GitServerSecret nameSshKeySecret
        boolean createCodeReviewPipeline
      -- status --
        boolean available
      }
      EdpComponent <.u. GitServer : "owner reference"

      class GitServerSecret <extends Secret> {
      -- metadata --
        String name
      -- data --
        String id_rsa
        String id_rsa.pub
        String username
      }
      GitServerSecret <-d- GitServer : "reference by nameSshKeySecret"


      class GitRepository <<tbd>> {
      -- metadata --
        String name
      -- spec --
      -- status --
        boolean available
      }
      GitRepository .u.> GitServer : "owner reference"

    }

    package keycloak {
      class Keycloak {
      -- metadata --
        String name
      -- spec --
        String url
        KeycloakSecret secret
        String ssoRealmName
        KeycloakUserStruct[] users
      -- status --
        boolean available
      }
      EdpComponent <.u. Keycloak : "owner reference"

      class KeycloakInstaller<<tbd>> {
      -- metadata --
      -- spec --
        String version
      -- status --
      }
      KeycloakInstaller <-r- Keycloak : create if type of \n component is internal

      class KeycloakUserStruct <internal Struct> {
          String username
          String[] realmRoles
      }
      KeycloakUserStruct <-d- Keycloak : "internal structure"

      class KeycloakSecret <extends Secret> {
      -- metadata --
        String name
      -- data --
        String username
        String password
      }
      KeycloakSecret <-d- Keycloak : "reference by secret"

      class KeycloakRealm {
      -- metadata --
        String name
      -- spec --
        String realmName
        String ssoRealmName
        KeycloakUserStruct[] users
      -- status --
        boolean available
      }
      KeycloakRealm <-d- Keycloak : "create realm with name "main" \r realmName = namespace + "-" + name"
      KeycloakUserStruct <-r- KeycloakRealm

      class KeycloakClient {
      -- metadata --
        String name
      -- spec --
        String clientId
        boolean advancedProtocolMappers
        String[] clientRoles
        boolean directAccess
        boolean public
        KeycloakClientSecret secret
        String targetRealm
        String webUrl
      -- status --
      }
      KeycloakClient .u.> KeycloakRealm : "owner reference"

      class KeycloakClientSecret <extends Secret> {
      -- metadata --
        String name
      -- data --
        String clientSecret
      }
      KeycloakClientSecret <-d- KeycloakClient : "reference by secret"

      class KeycloakUser <<tbd>> {
      -- metadata --
      -- spec --
        String username
        String[] roles
      -- status --
      }
      KeycloakUser .u.> KeycloakRealm : "owner reference \n created from KeyCloak "

    }

    package jenkins {
      class Jenkins {
      -- metadata --
        String name
      -- spec --
        String image
        String version
        JenkinsVolumeStruct[] volumes
        JenkinsSharedLibraryStruct[] sharedLibraries
        JenkinsKeycloakStruct keycloakSpec
        JenkinsEdpSpecStruct: edpSpec
      -- status --
        boolean available
        JenkinsAdminSecret adminSecretName
        JenkinsSlaveStruct[] slaves
        JenkinsJobProvisionStruct jobProvisions
      }
      EdpComponent <.u. Jenkins : "owner reference"

      class JenkinsVolumeStruct <internal Struct> {
          String name
          String storageClass
          String capacity
      }
      JenkinsVolumeStruct <-- Jenkins : "internal structure"

      class JenkinsSharedLibraryStruct <internal Struct> {
          String name
          String id
          String repository
          String version
      }
      JenkinsSharedLibraryStruct <-- Jenkins : "internal structure"

      class JenkinsKeycloakStruct <internal Struct> {
          boolean enabled
          String url
      }
      JenkinsKeycloakStruct <-- Jenkins : "internal structure \r(need to be revised)"

      class JenkinsEdpSpecStruct <internal Struct> {
          String dnsWildcard
      }
      JenkinsEdpSpecStruct <-- Jenkins : "internal structure \r(need to be revised)"


      class JenkinsAdminSecret <extends Secret> {
      -- metadata --
        String name
      -- data --
        String username
        String password
      }
      JenkinsAdminSecret <-- Jenkins : "reference by adminSecretName"

      class JenkinsSlaveStruct <internal Struct> {
          String name
      }
      JenkinsSlaveStruct <-- Jenkins : "internal structure"

      class JenkinsJobProvisionStruct <internal Struct> {
          String name
      }
      JenkinsJobProvisionStruct <-- Jenkins : "internal structure"


      class JenkinsScript {
      -- metadata --
        String name
      -- spec --
        String sourceConfigMapName
        String ownerName
      -- status --
        + Bool available
        + Bool executed
      }
      JenkinsScript .u.> Jenkins : "owner reference"

      class JenkinsScriptSourceConfigMap <extends ConfigMap> {
      -- metadata --
        String name
      -- data --
        String context
      }
      JenkinsScriptSourceConfigMap <-d- JenkinsScript : "reference by sourceConfigMapName"


      class JenkinsInstaller <<tbd>> {
      -- metadata --
      -- spec --
        String version
      -- status --
      }
      JenkinsInstaller <-r- Jenkins : created if type of component is internal

      class JenkinsServiceAccount {
      -- metadata --
        String name
      -- spec --
        String type
        JenkinsServiceAccountSecret credentials
        String ownerName
      -- status --
        + Bool available
        + Bool created
      }
      JenkinsServiceAccount .u.> Jenkins : "owner reference"

      class JenkinsServiceAccountSecret <extends Secret> {
      -- metadata --
        String name
      -- data --
        String username
        String password
      }
      JenkinsServiceAccountSecret <-d- JenkinsServiceAccount : "reference by credentials"

      class JenkinsFolder <<tbd>> {
      -- metadata --
      creates folder with \n create release pipeline
      -- spec --
        String name
      -- status --
      }
      JenkinsFolder .u.> Jenkins : "owner reference"

      class JenkinsJob <<tbd>> {
      -- metadata --
      -- spec --
        String name
        Trigger trigger
        Map[] parameters
        JobSource jobSource
      -- status --
      }
      JenkinsJob .u.> JenkinsFolder : "owner reference"

      class JenkinsJobBuild <<tbd>> {
      -- metadata --
      -- spec --
      -- status --
      }
      JenkinsJobBuild .u.> JenkinsJob : "owner ref"

  }

'  EdpComponent <.u.components: : "owner reference from a component"
  components -u-> jenkins  : "create JenkinsServiceAccount"
  components -u-> keycloak : "create keycloakClient"
  components -u-> git : "create keycloakClient"

  package components {
    package nexus {
      class Nexus {
        -- metadata --
        - String is-credentials
        - String ci-credentials
        -- spec --
        + String version
        + Struct volumes
        + Struct users
        -- status --
        - Bool available
        - Time lastTimeUpdated
        - String status
      }
      Nexus -u[hidden]-> JenkinsJobBuild

      class NexusInstaller <<tbd>> {
      -- metadata --
      -- spec --
        String version
      -- status --
      }
      NexusInstaller <-r- Nexus : created if type of component is internal


      class NexusUser <<tbd>> {
        -- metadata --
        -- spec --
        + String nexusName (optional)
        + String name
        + Struct role
        + String email
        + String firstName
        + String lastName
        -- status --
        -- reconcile --
        +addUserInNexus()
      }
      NexusUser .u.> Nexus : owner ref

      class NexusScript <<tbd>> {
        -- metadata --
        -- spec --
        + String nexusName (optional)
        + String name
        + String configMapName
        + String configMapKey
        -- status --
        -- reconcile --
        +addScriptInNexus()
      }
      NexusScript .u.> Nexus : owner ref
    }

    package sonar {
      class Sonar {
        -- metadata --
        -- spec --
        + String version
        -- status --
        -- reconcile --
        checkSonarClientConnection()
        getSonarQualityGates()
        getSonarQualityProfiles()
      }

      class SonarInstaller <<tbd>> {
      -- metadata --
      -- spec --
        String version
      -- status --
      }
      SonarInstaller <-r- Sonar : created if type of component is internal

      class SonarQualityProfile<<tbd>> {
        -- metadata --
        -- spec --
        + String profileName
        -- status --
      }
      SonarQualityProfile <-d- Sonar : create

      class SonarQualityGate<<tbd>> {
        -- metadata --
        -- spec --
        + String sonarName (optional)
        + String gateName
        -- status --
      }
      SonarQualityGate <-d-  Sonar : owner ref
    }

    package git {
      package gerrit {
        class Gerrit {
          -- metadata --
          -- spec --
          -- status --
        }
        Gerrit -u-> GitServer :create

        class GerritRepository {
          -- metadata --
          -- spec --
          + String gerritName (optional)
          + String repositoryName
          + GitDetails source
          -- status --
        }
        GerritRepository .u.> Gerrit : owner ref

        class GerritReplicationConfig {
                  -- metadata --
                  -- spec --
                  + String ownerName (optional)
                  + String sshUrl
                  -- status --
                }
                GerritReplicationConfig .u.> Gerrit : owner ref

      }
     }
  }
}

legend
|= arrow   |= meaning|
|  ..>     |   owner references  |
|  -->     |   creates     |
|<back:LightGoldenRodYellow>    </back>| Work In Progress |
|<back:LightGreen>    </back>| Implemented |
|<back:Khaki>    </back>| TBD |
endlegend

skinparam class {
	backgroundColor<<impl>> LightGoldenRodYellow
	backgroundColor<<wip>> LightGreen
	backgroundColor<<tbd>> Khaki
}
@enduml