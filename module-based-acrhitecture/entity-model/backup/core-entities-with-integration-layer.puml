
@startuml

package edp.epam.com {

  package domain {

    class Codebase {
      -- annotations --
      -- metadata --
      -- spec --
      String name
      CodebaseType type
      VCS
      techFramework
      -- status --
    }

    enum CodebaseType {
      APPLICATION
      AUTOTESTS
      LIBRARY
    }
    Codebase -left-> CodebaseType
    Codebase -right[hidden]-> CdPipeline

    class TechologyFramework {
      -- annotations --
      -- metadata --
      -- spec --
        String language
        String jenkinsSlaveAlias
        String jenkinsSlaveVersion
      -- status --
    }
    TechologyFramework -up[hidden]-> CodebaseType
    Codebase --> TechologyFramework :create

    class CodebaseBranch {
      -- annotations --
      -- metadata --
      -- spec --
        + String name
      -- status --
    }
    CodebaseBranch .u.>  Codebase : "owner ref"
    CodebaseBranch -r-> CodebaseArtifactStream : create

    class CodebaseArtifact {
      -- annotations --
      -- metadata --
      -- spec --
        + String commit
        + ArtifactType type
      -- status --
        String version
        String url
    }
    CodebaseArtifact .u.> CodebaseBranch: "owner ref"

    enum ArtifactType {
      ZIP
      JAR
      DOCKER
    }
    CodebaseArtifact -left-> ArtifactType

    class CdPipeline {
      -- annotations --
      -- metadata --
      -- spec --
        CodebaseArtifactStream[] applications
        ThirdPartyService[] services
      -- status --
    }
    CdPipeline -d-> ThirdPartyService: create
    CdPipeline -d-> CdPipelineStage: create

    class CodebaseArtifactStream {
      -- annotations --
      -- metadata --
      -- spec --
        + String name
        + CodbaseArtifact[] availableArtifacts
      -- status --
        String version
        String url
    }
    CodebaseArtifact .u.> CodebaseArtifactStream : "owner ref"
    CodebaseArtifactStream .u.> CdPipeline : "owner ref"
    CodebaseArtifactStream *-r[hidden]- ThirdPartyService


    class ThirdPartyService {
      -- annotations --
      -- metadata --
      -- spec --
      -- status --
    }

    class CdPipelineStage {
      -- annotations --
      -- metadata --
      -- spec --
        CdQualityGate[] qualityGates
        TriggerType triggerType
      -- status --
    }
    CdPipelineStage -d-> CdQualityGate: create
    CdPipelineStage -u-> CodebaseArtifactStream : create input stream
    CdPipelineStage -u-> CodebaseArtifactStream : create output stream
    CdPipelineStage ..> CdPipelineStage : owner ref next stage

    enum TriggerType {
      MANUAL
      NEW_ARTIFACT
    }
    CdPipelineStage --> TriggerType

    class CdQualityGate {
      -- annotations --
      -- metadata --
      -- spec --
        CdQualityGateType type
        CodebaseBranch autotest
        String command2Run
        String command2CheckQualityGate
      -- status --

    }
    CdQualityGate .up.> CodebaseBranch: owner ref

    class CdStageDeploy {
      -- annotations --
      -- metadata --
      -- spec --
        CdPipelineStage stage
        CodebaseArtifact: artifacts
      -- status --
    }
    CdStageDeploy .u.> CdPipelineStage :owner ref


  }

  package api {
    class DeliverySpace {
      -- annotations --
      -- metadata --
      -- spec --
      EDPComponent[] components
      -- status --
      -- method --
    }


'    enum EdpComponentType {
'      CODE_REVIEW
'      CI_SERVER
'      CD_SERVER
'      STATIC_ANALYSES
'      ARTIFACT_REPOSITORY
'      VCS
'    }
'
'    EdpComponentType "*" -left-> "1" EdpComponent

    enum EdpLocationType {
      EXTERNAL
      INTERNAL
    }
    EdpComponent --> EdpLocationType

    abstract class EdpComponent {
      -- annotations --
      EdpComponentType[] componentTypes
      edpTenant:
      -- metadata --
      -- spec --
      EdpLocationType location
      String version
      String extrenalUrl
      Credentials credentials
      -- status --
      boolean clientActive
      externalUrl
      -- method --
      install()
      configure()
      expose()
      integrate()
    }
    EdpComponent .u.> DeliverySpace : owner ref

    package vcs {
      class GitServer {
      -- annotations --
      -- metadata --
      -- spec --
        String remoteRepoUrl
        Credentials credentials
      -- status --
      }
      class GitRepository {
      -- annotations --
      -- metadata --
      -- spec --
        String repositoryName
      -- status --
      }
      GitRepository .u.> GitServer : "owner reference"

      class GitBranch {
      -- annotations --
      -- metadata --
      -- spec --
        String name
      -- status --
      }
      GitBranch .u.> GitRepository : "owner reference"
    }

    package keycloak {
      class Keycloak {
      -- annotations --
      -- metadata --
      -- spec --
      -- status --
      }
      EdpComponent<|--Keycloak

      class KeycloakInstaller {
      -- annotations --
      -- metadata --
      -- spec --
        String version
      -- status --
      }
      KeycloakInstaller <-r- Keycloak : create if type of \n component is internal

      class KeycloakRealm {
      -- annotations --
      -- metadata --
      -- spec --
        String name
      -- status --
      }
      KeycloakRealm <-d- Keycloak : create

      class KeycloakClient {
      -- annotations --
      -- metadata --
      -- spec --
        String realmname
        String name
      -- status --
      }
      KeycloakClient .u.> KeycloakRealm : "owner reference"

      class KeycloakUser {
      -- annotations --
      -- metadata --
      -- spec --
        String username
        String[] roles
      -- status --
      }
      KeycloakUser .u.> KeycloakRealm : "owner reference \n created from KeyCloak "

    }

    package jenkins {
      class Jenkins {
      -- annotations --
      -- metadata --
      -- spec --
        + String image
        + String version
        + Struct volumes
        + Struct sharedLibraries
        + Struct keycloakSpec
        + Struct: edpEpec
      -- status --
        + Struct slaves
        + String AdminSecretName
      }
      EdpComponent<|--Jenkins

      class JenkinsScript {
      -- annotations --
      -- metadata --
      -- spec --
        String sourceConfigMapName
      -- status --
        + Bool available
        + Bool executed
      }
      JenkinsScript .u.> Jenkins : "owner reference"

      class JenkinsInstaller {
      -- annotations --
      -- metadata --
      -- spec --
        String version
      -- status --
      }
      JenkinsInstaller <-r- Jenkins : created if type of component is internal

      class JenkinsPlugin {
      -- annotations --
      -- metadata --
      -- spec --
        String pluginInstruction
      -- status --
      }
      JenkinsPlugin .u.> Jenkins : "owner reference"

      class JenkinsServiceAccount {
      -- annotations --
      -- metadata --
      -- spec --
        Credentials credentials
      -- status --
        + Bool available
        + Bool created
      }
      JenkinsServiceAccount .u.> Jenkins : "owner reference"

      class JenkinsFolder {
      -- annotations --
      -- metadata --
      creates folder with \n create release pipeline
      -- spec --
        String name
      -- status --
      }
      JenkinsFolder .u.> Jenkins : "owner reference"

      class JenkinsJob {
      -- annotations --
      -- metadata --
      -- spec --
        String name
        Trigger trigger
        Map[] parameters
        JobSource jobSource
      -- status --
      }
      JenkinsJob .u.> JenkinsFolder : "owner reference"

      class JenkinsJobBuild {
      -- annotations --
      -- metadata --
      -- spec --
      -- status --
      }
      JenkinsJobBuild .u.> JenkinsJob : "owner ref"

  }

  integration -u[hidden]-> JenkinsJobBuild

  package integration {
      class KeycloakComponentIntegration {
      -- annotations --
      -- metadata --
      -- spec --
        ClientDetails client
      -- status --
      }
      KeycloakComponentIntegration -u-> KeycloakClient : "create"


      class JenkinsComponentIntegration {
      -- annotations --
      -- metadata --
      -- spec --
        JenkinsPlugin[] plugin
        ServiceAccount[] serviceAccount
      -- status --
      }
      JenkinsComponentIntegration -u-> JenkinsServiceAccount : "create"
      JenkinsComponentIntegration -u-> JenkinsPlugin : "create"

      class GitComponentIntegration {
      -- annotations --
      -- metadata --
      -- spec --
        GitDetails sourceGit
      -- status --
      }
      JenkinsComponentIntegration -r[hidden]-> GitComponentIntegration : "create"
      KeycloakComponentIntegration -r[hidden]-> GitComponentIntegration : "create"

      class CodebaseIntegration {
      -- annotations --
      -- metadata --
      -- spec --
        String codebaseName
        GitDetails sourceGit
        GitDetails targetGit
      -- status --
      }
      Codebase -d-> CodebaseIntegration : create
      CodebaseIntegration -l-> GitComponentIntegration : create
      CodebaseIntegration -u-> JenkinsFolder : "create"
      CodebaseIntegration -u-> JenkinsJob : "create CreateReleasePipeline \n in future we can do this \n for Build and CodeReview "
      CodebaseIntegration -u-> GitRepository : "create"

      class CdPipelineIntegration {
      -- annotations --
      -- metadata --
      -- spec --
        String name
      -- status --
      }
      CdPipeline -d-> CdPipelineIntegration : create
      CdPipelineIntegration -u-> JenkinsFolder : "create"
      CdPipelineIntegration -u-> JenkinsJob : "create job per stage"

      class CodebaseBranchIntegration {
      -- annotations --
      -- metadata --
      -- spec --
        String branch
      -- status --
      }
      CodebaseBranch -d-> CodebaseBranchIntegration
     CodebaseBranchIntegration -u-> JenkinsJobBuild
      CodebaseBranchIntegration -u-> GitBranch


  }

  package components {
    class Gerrit {
      -- annotations --
      -- metadata --
      -- spec --
      -- status --
    }
    Gerrit -u-> JenkinsComponentIntegration :create
    Gerrit -u-> KeycloakComponentIntegration :create
    Gerrit -u-> GitComponentIntegration :create


    class Nexus {
      -- annotations --
      - String is-credentials
      - String ci-credentials
      -- metadata --
      -- spec --
	    + String version
      + Struct volumes
      -- status --
      - Bool Available
      - Time LastTimeUpdated
      - String Status
    }
    Nexus -u-> JenkinsComponentIntegration :create
    Nexus -u-> KeycloakComponentIntegration :create

    class NexusUser {
      -- annotations --
      -- metadata --
      -- spec --
	    + String nexusName (optional)
	    + String name
      + Struct role
      -- status --
    }
    NexusUser .u.> Nexus : owner ref


    class Sonar {
      -- annotations --
      -- metadata --
      -- spec --
	    + String version
      -- status --
    }
    Sonar -u-> JenkinsComponentIntegration :create
    Sonar -u-> KeycloakComponentIntegration :create

    class BitBucket {
      -- annotations --
      -- metadata --
      -- spec --
      -- status --
    }
    BitBucket -u-> GitComponentIntegration :create


    class Gitllab {
      -- annotations --
      -- metadata --
      -- spec --
      -- status --
    }
    Gitllab -u-> GitComponentIntegration :create

'    EdpComponent<|--Gerrit
'    EdpComponent<|--Nexus
'    EdpComponent<|--Sonar
'    EdpComponent<|--BitBucket
'    EdpComponent<|--Gitlab
  }
}

legend
|= arrow   |= meaning|
|  ..>     |   owner references  |
|  -->     |   creates     |
endlegend

@enduml